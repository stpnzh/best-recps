{"version":3,"sources":["components/RecipeModal.js","components/Cards.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["RecipeModal","props","useState","show","setShow","Button","variant","onClick","Modal","onHide","scrollable","size","Header","closeButton","Title","recipe","name","Body","style","marginRight","fontSize","ingredients","map","i","obj","Array","isArray","title","list","slice","handleNested","directions","Cards","recipeObjects","recipes","Card","width","height","margin","Text","description","rows","cells","forEach","idx","push","length","Container","paddingLeft","row","Row","Home","paddingTop","paddingBottom","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0uMA6CeA,EAzCK,SAACC,GAAW,IAAD,EAELC,oBAAS,GAFJ,mBAEtBC,EAFsB,KAEhBC,EAFgB,KAsB7B,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QApBnB,kBAAMH,GAAQ,KAoB7B,cACA,kBAACI,EAAA,EAAD,CAAOL,KAAMA,EAAMM,OApBH,kBAAML,GAAQ,IAoBUM,YAAY,EAAMC,KAAK,MAC7D,kBAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,GACvB,kBAACL,EAAA,EAAMM,MAAP,KAAeb,EAAMc,OAAOC,OAE9B,kBAACR,EAAA,EAAMS,KAAP,CAAYC,MAAO,CAAEC,YAAY,OAASC,SAAS,QAAnD,cAEE,4BAAKnB,EAAMc,OAAOM,YAAYC,KAAI,SAAAC,GAAC,OAAI,4BAxB1B,SAACC,GACpB,GAAIC,MAAMC,QAAQF,GAAM,CACtB,IAAIG,EAAQH,EAAI,GACZI,EAAOJ,EAAIK,MAAM,GACrB,OACE,oCACE,4BAAKF,GACL,4BAAKC,EAAKN,KAAI,SAAAC,GAAC,OAAI,4BAAKA,QAI5B,OAAOC,EAayCM,CAAaP,QAF3D,aAIE,4BAAKtB,EAAMc,OAAOgB,WAAWT,KAAI,SAAAC,GAAC,OAAI,4BAAKA,W,gBCItCS,EAnCD,SAAC/B,GAEb,IAAMgC,EAAgBhC,EAAMiC,QAAQZ,KAAI,SAAAP,GAAM,OAC5C,kBAACoB,EAAA,EAAD,CAAMjB,MAAO,CAAEkB,MAAM,MAAQC,OAAO,QAAUC,OAAO,WAEnD,kBAACH,EAAA,EAAKlB,KAAN,KACE,kBAACkB,EAAA,EAAKrB,MAAN,KAAaC,EAAOC,MACpB,kBAACmB,EAAA,EAAKI,KAAN,CAAWrB,MAAO,CAAEE,SAAS,QAAWL,EAAOyB,aAC/C,kBAAC,EAAD,CAAazB,OAAQA,SAKvB0B,EAAO,GACPC,EAAQ,GAcZ,OAbAT,EAAcU,SAAQ,SAAC5B,EAAQ6B,GACzBA,EAAM,IAAM,EACdF,EAAMG,KAAK9B,IAEX0B,EAAKI,KAAKH,IACVA,EAAQ,IACFG,KAAK9B,IAET6B,IAAQX,EAAca,OAAS,GACjCL,EAAKI,KAAKH,MAKZ,kBAACK,EAAA,EAAD,CAAW7B,MAAO,CAAE8B,YAAY,SAC7BP,EAAKnB,KAAI,SAAA2B,GAAG,OAAI,kBAACC,EAAA,EAAD,KAAMD,QCpBdE,EATF,WACX,OACE,kBAACJ,EAAA,EAAD,KACE,wBAAI7B,MAAO,CAAEkC,WAAW,OAASC,cAAc,OAASL,YAAY,SAApE,2CACA,kBAAC,EAAD,CAAOd,QAASA,MCQPoB,EAZH,WACV,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,UCAUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.db018b73.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal'\n\nconst RecipeModal = (props) => {\n\n  const [show, setShow] = useState(false);\n\n  const handleShow = () => setShow(true);\n  const handleClose = () => setShow(false);\n\n  const handleNested = (obj) => {\n    if (Array.isArray(obj)) {\n      let title = obj[0];\n      let list = obj.slice(1,);\n      return (\n        <>\n          <li>{title}</li>\n          <ul>{list.map(i => <li>{i}</li>)}</ul>\n        </>\n      )\n    } else {\n      return obj\n    }\n  }\n\n  return (\n    <>\n      <Button variant='outline-primary' onClick={handleShow}>See recipe</Button>\n      <Modal show={show} onHide={handleClose} scrollable={true} size='lg'>\n        <Modal.Header closeButton>\n          <Modal.Title >{props.recipe.name}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body style={{ marginRight: `1rem`, fontSize: `90%` }}>\n          Ingredients\n          <ul>{props.recipe.ingredients.map(i => <li>{handleNested(i)}</li>)}</ul>\n          Directions\n          <ol>{props.recipe.directions.map(i => <li>{i}</li>)}</ol>\n        </Modal.Body>\n\n      </Modal>\n    </>\n  )\n}\n\nexport default RecipeModal;","import React from 'react';\n// import placeholder from '../assets/images/placeholder.png';\nimport RecipeModal from './RecipeModal';\n\nimport { Container, Row, Card } from 'react-bootstrap';\n\nconst Cards = (props) => {\n\n  const recipeObjects = props.recipes.map(recipe => \n    <Card style={{ width: `23%`, height: `14rem`, margin: `0.5rem` }}>\n      {/* <Card.Img variant='top' src={ placeholder } style={{ width: `25%`}}/> */}\n      <Card.Body>\n        <Card.Title>{recipe.name}</Card.Title>\n        <Card.Text style={{ fontSize: `95%` }}>{recipe.description}</Card.Text>\n        <RecipeModal recipe={recipe}/>\n      </Card.Body>\n    </Card>\n  )\n\n  let rows = [];\n  let cells = [];\n  recipeObjects.forEach((recipe, idx) => {\n    if (idx % 4 !== 0) {\n      cells.push(recipe);\n    } else {\n      rows.push(cells);\n      cells = [];\n      cells.push(recipe);\n    }\n    if (idx === recipeObjects.length - 1) {\n      rows.push(cells);\n    }\n  });\n\n  return (\n    <Container style={{ paddingLeft: `2rem`}}>\n      {rows.map(row => <Row>{row}</Row>)}\n    </Container>\n  )\n}\n\nexport default Cards;","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nimport recipes from './recipes.json';\nimport Cards from './Cards';\n\n\nconst Home = () => {\n  return (\n    <Container>\n      <h2 style={{ paddingTop: `2rem`, paddingBottom: `1rem`, paddingLeft: `1rem` }}>a selection of Steph's favorite recipes</h2>\n      <Cards recipes={recipes}/>\n    </Container>\n  )\n}\n\nexport default Home;","import React from 'react';\nimport { Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Home from './components/Home';\n\nconst App = () => {\n  return (\n    <div>\n      <Switch>\n        <Route path='/' exact>\n          <Home/>\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}